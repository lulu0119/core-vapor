// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compile > bindings 1`] = `
"import { children as _children, renderEffect as _renderEffect, setText as _setText, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _renderEffect(() => _setText(n1, "count is ", _ctx.count, "."))
  return n0
}"
`;

exports[`compile > custom directive > basic 1`] = `
"import { children as _children, resolveDirective as _resolveDirective, withDirectives as _withDirectives, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_resolveDirective("vTest")], [_resolveDirective("vHello"), void 0, void 0, { world: true }]])
  return n0
}"
`;

exports[`compile > directives > custom directive > basic 1`] = `
"import { children as _children, withDirectives as _withDirectives, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample]])
  return n0
}"
`;

exports[`compile > directives > custom directive > binding value 1`] = `
"import { children as _children, withDirectives as _withDirectives, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg]])
  return n0
}"
`;

exports[`compile > directives > custom directive > dynamic parameters 1`] = `
"import { children as _children, withDirectives as _withDirectives, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg, _ctx.foo]])
  return n0
}"
`;

exports[`compile > directives > custom directive > modifiers 1`] = `
"import { children as _children, withDirectives as _withDirectives, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg, void 0, { bar: true }]])
  return n0
}"
`;

exports[`compile > directives > custom directive > modifiers w/o binding 1`] = `
"import { children as _children, withDirectives as _withDirectives, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, void 0, void 0, { "foo-bar": true }]])
  return n0
}"
`;

exports[`compile > directives > custom directive > static parameters 1`] = `
"import { children as _children, withDirectives as _withDirectives, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg, "foo"]])
  return n0
}"
`;

exports[`compile > directives > custom directive > static parameters and modifiers 1`] = `
"import { children as _children, withDirectives as _withDirectives, template as _template } from 'vue/vapor';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _withDirectives(n1, [[_ctx.vExample, () => _ctx.msg, "foo", { bar: true }]])
  return n0
}"
`;

exports[`compile > directives > v-cloak > basic 1`] = `
"import { template as _template } from 'vue/vapor';
const t0 = _template("<div>test</div>")

export function render(_ctx) {
  const n0 = t0()
  return n0
}"
`;

exports[`compile > directives > v-pre > basic 1`] = `
"import { template as _template } from 'vue/vapor';
const t0 = _template("<div :id=\\"foo\\"><Comp></Comp>{{ bar }}</div>")

export function render(_ctx) {
  const n0 = t0()
  return n0
}"
`;

exports[`compile > directives > v-pre > self-closing v-pre 1`] = `
"import { children as _children, createTextNode as _createTextNode, append as _append, renderEffect as _renderEffect, setText as _setText, setDynamicProp as _setDynamicProp, template as _template } from 'vue/vapor';
const t0 = _template("<div></div><div><Comp></Comp></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 1: [n2],} = _children(n0)
  const n1 = _createTextNode()
  _append(n2, n1)
  _renderEffect(() => _setText(n1, _ctx.bar))
  _renderEffect(() => _setDynamicProp(n2, "id", _ctx.foo))
  return n0
}"
`;

exports[`compile > directives > v-pre > should not affect siblings after it 1`] = `
"import { children as _children, createTextNode as _createTextNode, append as _append, renderEffect as _renderEffect, setText as _setText, setDynamicProp as _setDynamicProp, template as _template } from 'vue/vapor';
const t0 = _template("<div :id=\\"foo\\"><Comp></Comp>{{ bar }}</div><div><Comp></Comp></div>")

export function render(_ctx) {
  const n0 = t0()
  const { 1: [n2],} = _children(n0)
  const n1 = _createTextNode()
  _append(n2, n1)
  _renderEffect(() => _setText(n1, _ctx.bar))
  _renderEffect(() => _setDynamicProp(n2, "id", _ctx.foo))
  return n0
}"
`;

exports[`compile > dynamic root 1`] = `
"import { createTextNode as _createTextNode, renderEffect as _renderEffect, setText as _setText } from 'vue/vapor';

export function render(_ctx) {
  const n1 = _createTextNode()
  _renderEffect(() => _setText(n1, 1, 2))
  return [n1]
}"
`;

exports[`compile > dynamic root nodes and interpolation 1`] = `
"import { children as _children, on as _on, renderEffect as _renderEffect, setText as _setText, setDynamicProp as _setDynamicProp, template as _template } from 'vue/vapor';
const t0 = _template("<button></button>")

export function render(_ctx) {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _on(n1, "click", () => _ctx.handleClick)
  _renderEffect(() => _setText(n1, _ctx.count, "foo", _ctx.count, "foo", _ctx.count))
  _renderEffect(() => _setDynamicProp(n1, "id", _ctx.count))
  return n0
}"
`;

exports[`compile > expression parsing > interpolation 1`] = `
"(() => {
  const n1 = _createTextNode()
  _renderEffect(() => _setText(n1, a + b.value))
  return [n1]
})()"
`;

exports[`compile > expression parsing > v-bind 1`] = `
"(() => {
  const n0 = t0()
  const { 0: [n1],} = _children(n0)
  _renderEffect(() => _setDynamicProps(n1, { [key.value+1]: _unref(foo)[key.value+1]() }))
  return n0
})()"
`;

exports[`compile > fragment 1`] = `
"import { template as _template } from 'vue/vapor';
const t0 = _template("<p></p><span></span><div></div>")

export function render(_ctx) {
  const n0 = t0()
  return n0
}"
`;

exports[`compile > static + dynamic root 1`] = `
"import { createTextNode as _createTextNode, renderEffect as _renderEffect, setText as _setText } from 'vue/vapor';

export function render(_ctx) {
  const n1 = _createTextNode()
  _renderEffect(() => _setText(n1, 1, 2, "3", 4, 5, "6", 7, 8, "9", 'A', 'B'))
  return [n1]
}"
`;

exports[`compile > static template 1`] = `
"import { template as _template } from 'vue/vapor';
const t0 = _template("<div><p>hello</p><input><span></span></div>")

export function render(_ctx) {
  const n0 = t0()
  return n0
}"
`;
